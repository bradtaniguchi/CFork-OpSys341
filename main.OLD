/* 
 * Bradley Taniguchi
 *
 * CFork-OpSys341
 * Operating Systems 341
 * Dr. Bin Tang
 * 02/17/16
 */

#include <stdio.h>
#include <unistd.h> 
#include <sys/types.h>
#include <sys/wait.h> //include wait

void pidTest(pid_t pid) { 
    // Show the pid, getpid and getppid
    printf("================\n");
    printf("pid: %d\n", pid);
    printf("getppid: %d\n", getppid());
    printf("getpid: %d\n", getpid());
    printf("================\n");
}
int getMin(int len, int* arrPtr) {
    return -1;    
}
int getMax(int len, int* arrPtr) {
    return -1;
}
int getAvg(int len, int* arrPtr) {
    return -1;
}
int main(int argc, int* argv) { //only takes integer char
    printf("---InMain---\n\n");
    if (argc == 1) {
        printf("Not Enough Arguments!\n");
        return 0; //exit Program
    }
    else {
        pid_t pid;
        pidTest(pid);
        fflush(stdout); //1+ processes, and main
        pid = fork(); //first system fork
//        fflush(stdout); 
//        pid = fork();  //2+ more processes, plus main, so 4.
        if(pid < 0) {
            fprintf(stderr, "Fork Failed!\n"); // error print
            return 1;
        }
        else if (pid == 0) { // child process, check Min
            printf("CHILD PROCESS\n");
            pidTest(pid); // should give different numbers??
        }
        else if (pid == 1) { // 2nd child process, check Max
            printf("CHILD PROCESS 2\n");
            pidTest(pid);
        }
        else if (pid == 2) { // third child process, check Avg
            printf("CHILD PROCESS 3\n");
            pidTest(pid);
        }
        else { // parent
            wait(NULL); // wait for childs
                printf("Child Ended, Back in Parent\n");
        }
        return 0;
    }
}
